Q.1=>
1. **Maximum Sum Subarray of Size K:**
 Given an array of integers and a positive integer K, find the maximum sum of a subarray of size K.

=>
#include <iostream>
#include <vector>

int findMaxSumSubarray(const std::vector<int>& arr, int K) {
    int maxSum = 0;
    int currentSum = 0;

    // Calculate the sum of the first K elements
    for (int i = 0; i < K; i++) {
        currentSum += arr[i];
    }
    maxSum = currentSum;

    // Slide the window and update the sum
    for (int i = K; i < arr.size(); i++) {
        currentSum = currentSum - arr[i - K] + arr[i];
        maxSum = std::max(maxSum, currentSum);
    }

    return maxSum;
}

int main() {
    std::vector<int> arr = {2, 1, 5, 1, 3, 2};
    int K = 3;

    int maxSum = findMaxSumSubarray(arr, K);
    std::cout << "Maximum sum of subarray of size " << K << ": " << maxSum << std::endl;

    return 0;
}
--------------------------------------------------------------------------------
Q.2=> **Smallest Subarray with a Given Sum:**
Given an array of positive integers and a target sum, find the length of the smallest contiguous subarray with a sum greater
than or equal to the target sum.

ANS.=>
#include <iostream>
#include <vector>
#include <limits>

int smallestSubarrayLength(std::vector<int>& nums, int targetSum) {
    int minLength = std::numeric_limits<int>::max();  // Initialize the minimum length to a large value
    int currentSum = 0;
    int start = 0;

    for (int end = 0; end < nums.size(); end++) {
        currentSum += nums[end];  // Add the current element to the sum

        while (currentSum >= targetSum) {
            // Update the minimum length if a smaller subarray is found
            minLength = std::min(minLength, end - start + 1);

            // Remove the element at the start from the sum and move the start pointer
            currentSum -= nums[start];
            start++;
        }
    }

    return (minLength == std::numeric_limits<int>::max()) ? 0 : minLength;
}

int main() {
    std::vector<int> nums = {1, 4, 2, 3, 5, 2};
    int targetSum = 7;

    int result = smallestSubarrayLength(nums, targetSum);

    std::cout << "Length of the smallest subarray with sum >= " << targetSum << " is " << result << std::endl;

    return 0;
}
-----------------------------------------------------------
Q.3=>
**Longest Substring Without Repeating Characters:**
Given a string, find the length of the longest substring without repeating characters.

ANS.=>
#include <iostream>
#include <unordered_map>

int lengthOfLongestSubstring(const std::string& s) {
  // Use a hash table to store the last occurrence of each character
  std::unordered_map<char, int> char_index;

  int max_length = 0;
  int start = 0;

  for (int i = 0; i < s.length(); ++i) {
    char ch = s[i];

    // If the character has already been seen, update the starting index
    if (char_index.count(ch)) {
      start = std::max(start, char_index[ch] + 1);
    }

    // Update the character's last occurrence index
    char_index[ch] = i;

    // Update the maximum length
    max_length = std::max(max_length, i - start + 1);
  }

  return max_length;
}

int main() {
  std::string str = "abcabcbb";
  int length = lengthOfLongestSubstring(str);
  std::cout << "The length of the longest substring without repeating characters is: " << length << std::endl;

  return 0;
}
-------------------------------------------------------------------------------------------
Q.4=>
**Minimum Window Substring:**
Given two strings, find the minimum window in the first string that contains all characters of the second string.

ANS.=>
#include <iostream>
#include <unordered_map>
#include <climits>

std::string minWindowSubstring(const std::string& s, const std::string& t) {
  // Use a hash table to store the frequency of characters in t
  std::unordered_map<char, int> char_counts;
  for (char c : t) {
    char_counts[c]++;
  }

  // Initialize variables
  int min_length = INT_MAX;
  std::string min_window;
  int start = 0, end = 0;
  int matching_characters = 0;

  // Iterate through the string s
  while (end < s.length()) {
    // Add the current character to the counts
    char c = s[end];
    if (char_counts.count(c) > 0) {
      char_counts[c]--;
      if (char_counts[c] >= 0) {
        matching_characters++;
      }
    }

    // If all characters of t are found
    while (matching_characters == t.length()) {
      // Check if the current window is smaller than the minimum
      if (end - start + 1 < min_length) {
        min_length = end - start + 1;
        min_window = s.substr(start, min_length);
      }

      // Remove the first character from the counts
      c = s[start];
      if (char_counts.count(c) > 0) {
        char_counts[c]++;
        if (char_counts[c] > 0) {
          matching_characters--;
        }
      }
      start++;
    }

    end++;
  }

  // Return the minimum window substring
  return min_length == INT_MAX ? "" : min_window;
}

int main() {
  std::string s = "ADOBECODEBANC";
  std::string t = "ABC";
  std::string min_window = minWindowSubstring(s, t);
  std::cout << "The minimum window substring is: " << min_window << std::endl;

  return 0;
}
--------------------------------------------------------------------------------
Q.5=>
**Fruit Basket:**
You have a row of trees, where each tree produces a certain type of fruit. You start at any tree, then repeatedly perform the
following steps: add one piece of fruit from the tree to your baskets. What is the total number of fruits you can collect using
two baskets?

ANS.=>
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int maxFruits(const std::vector<int>& fruits) {
  // Use a hash table to store the latest position of each fruit type
  std::unordered_map<int, int> last_seen;

  // Initialize variables
  int max_fruits = 0;
  int current_basket = 0;
  int basket_start = 0;

  // Iterate through the fruit trees
  for (int i = 0; i < fruits.size(); ++i) {
    int fruit_type = fruits[i];

    // Update the latest position of the current fruit type
    last_seen[fruit_type] = i;

    // If the current fruit type is already in one of the baskets, update the start index of the current basket
    if (current_basket > 0 && last_seen.count(fruits[basket_start]) == 1) {
      basket_start = std::max(basket_start, last_seen[fruits[basket_start]] + 1);
    }

    // Update the current basket count
    current_basket = std::max(current_basket, 1 + (i - basket_start));

    // Update the maximum fruit count
    max_fruits = std::max(max_fruits, current_basket);
  }

  return max_fruits;
}

int main() {
  std::vector<int> fruits = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
  int max_fruits = maxFruits(fruits);
  std::cout << "The maximum number of fruits you can collect is: " << max_fruits << std::endl;

  return 0;
}
----------------------------------------------------------------------------------
Q.6=>
**Max Consecutive Ones III:**
Given an array of 0s and 1s, find the maximum number of consecutive 1s by flipping at most K 0s to 1s.

ANS.=>
#include <iostream>
#include <vector>

int maxConsecutiveOnes(const std::vector<bool>& arr, int k) {
  int left = 0, right = 0;
  int zeros = 0;
  int max_length = 0;

  while (right < arr.size()) {
    if (!arr[right]) {
      zeros++;
    }

    while (zeros > k) {
      if (!arr[left]) {
        zeros--;
      }
      left++;
    }

    max_length = std::max(max_length, right - left + 1);
    right++;
  }

  return max_length;
}

int main() {
  std::vector<bool> arr = {1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0};
  int k = 2;
  int max_length = maxConsecutiveOnes(arr, k);
  std::cout << "The maximum number of consecutive 1s is: " << max_length << std::endl;

  return 0;
}
-------------------------------------------------------------------------
Q.7=>
**Permutation in String:**
Given two strings, s1 and s2, write a function to determine if s2 contains the permutation of s1.

ANS. 
#include <iostream>
#include <unordered_map>

bool isPermutation(const std::string& s1, const std::string& s2) {
  if (s1.length() != s2.length()) {
    return false;
  }

  std::unordered_map<char, int> char_counts;

  for (char c : s1) {
    char_counts[c]++;
  }

  for (char c : s2) {
    if (char_counts.count(c) == 0 || char_counts[c] == 0) {
      return false;
    }

    char_counts[c]--;
  }

  return true;
}

int main() {
  std::string s1 = "abc";
  std::string s2 = "acb";

  if (isPermutation(s1, s2)) {
    std::cout << s2 << " is a permutation of " << s1 << std::endl;
  } else {
    std::cout << s2 << " is not a permutation of " << s1 << std::endl;
  }

  return 0;
}
---------------------------------------------------------------------------------
Q.8=>
**Trapping Rain Water:**
Given an array representing the height of walls, calculate how much rainwater can be trapped between the walls.

ANS.=>
#include <iostream>
#include <vector>

int trapRainwater(const std::vector<int>& heights) {
  if (heights.size() < 3) {
    return 0;
  }

  // Create arrays to store the left and right maximum heights
  std::vector<int> left_max(heights.size());
  std::vector<int> right_max(heights.size());

  // Calculate the maximum height to the left of each wall
  left_max[0] = heights[0];
  for (int i = 1; i < heights.size(); ++i) {
    left_max[i] = std::max(left_max[i-1], heights[i]);
  }

  // Calculate the maximum height to the right of each wall
  right_max[heights.size() - 1] = heights[heights.size() - 1];
  for (int i = heights.size() - 2; i >= 0; --i) {
    right_max[i] = std::max(right_max[i+1], heights[i]);
  }

  // Calculate the trapped water at each wall
  int trapped_water = 0;
  for (int i = 0; i < heights.size(); ++i) {
    trapped_water += std::min(left_max[i], right_max[i]) - heights[i];
  }

  return trapped_water;
}

int main() {
  std::vector<int> heights = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
  int trapped_water = trapRainwater(heights);
  std::cout << "Total trapped rainwater: " << trapped_water << std::endl;

  return 0;
}
=========================================================================================
Q.9=>
**Longest Subarray with Ones After Replacement:**
Given an array containing only 0s and 1s, find the length of the longest subarray with at most one 0 that can be
replaced with 1 to get the longest contiguous subarray of 1s.

ANS.=>
#include <iostream>
#include <vector>

int longestSubarrayWithOnesAfterReplacement(const std::vector<int>& arr, int k) {
  int left = 0;
  int right = 0;
  int zeros = 0;
  int max_length = 0;

  while (right < arr.size()) {
    if (arr[right] == 0) {
      zeros++;
    }

    while (zeros > k) {
      if (arr[left] == 0) {
        zeros--;
      }
      left++;
    }

    max_length = std::max(max_length, right - left + 1);
    right++;
  }

  return max_length;
}

int main() {
  std::vector<int> arr = {0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1};
  int k = 2;
  int max_length = longestSubarrayWithOnesAfterReplacement(arr, k);
  std::cout << "The length of the longest subarray with at most " << k << " 0s: " << max_length << std::endl;

  return 0;
}
--------------------------------------------------------------------------------------------------------------------
Q.10=>
**Equal Sum Subarrays:**
Given an array of integers, determine if there exist two non-empty subarrays (not necessarily contiguous) such that
their sum is the same.

ANS.=>
#include <iostream>
#include <unordered_map>

bool hasEqualSumSubarrays(const std::vector<int>& nums) {
  // Use a hash table to store the cumulative sum of the array and its index.
  std::unordered_map<int, int> sums;
  int current_sum = 0;

  for (int i = 0; i < nums.size(); ++i) {
    current_sum += nums[i];
    if (current_sum == 0 || sums.count(current_sum)) {
      // Found two subarrays with equal sums
      return true;
    } else {
      sums[current_sum] = i;
    }
  }

  // No subarrays with equal sums found
  return false;
}

int main() {
  std::vector<int> nums = {1, 2, 3, 4, 5, -4, -3, -2, -1};

  if (hasEqualSumSubarrays(nums)) {
    std::cout << "Yes, there exist two non-empty subarrays with equal sums." << std::endl;
  } else {
    std::cout << "No, there are no two non-empty subarrays with equal sums." << std::endl;
  }

  return 0;
}
==================================================================================================